{
  parserClass='org.vlang.lang.VlangParser'

  implements='org.vlang.lang.psi.VlangCompositeElement'
  extends='org.vlang.lang.psi.impl.VlangCompositeElementImpl'

  elementTypeHolderClass='org.vlang.lang.VlangTypes'
  elementTypeClass='org.vlang.lang.psi.VlangCompositeElementType'
  tokenTypeClass='org.vlang.lang.psi.VlangTokenType'
  psiTreeUtilClass='org.vlang.lang.psi.VlangPsiTreeUtil'

  psiClassPrefix='Vlang'
  psiImplClassSuffix='Impl'
  psiPackage='org.vlang.lang.psi'
  psiImplPackage='org.vlang.lang.psi.impl'
  psiImplUtilClass="org.vlang.lang.psi.impl.VlangPsiImplUtil"
  parserUtilClass="org.vlang.lang.VlangParserUtil"

  tokens=[
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    HASH_LBRACK          =  '#['
    RBRACK               =  ']'
    RBRACK_EXP           =  ']!'
    LPAREN               =  '('
    RPAREN               =  ')'
    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','
    EQ                   =  '=='
    ASSIGN               =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    QUESTION             =  '?'
    PLUS_PLUS            =  '++'
    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    MINUS_MINUS          =  '--'
    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
    BIT_OR_ASSIGN        =  '|='
    BIT_CLEAR_ASSIGN     =  '&^='
    BIT_CLEAR            =  '&^'
    COND_AND             =  '&&'
    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
    BIT_OR               =  '|'
    SHIFT_LEFT_ASSIGN    =  '<<='
    SHIFT_LEFT           =  '<<'
    SEND_CHANNEL         =  '<-'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
    QUOTIENT_ASSIGN      =  '/='
    QUOTIENT             =  '/'
    REMAINDER_ASSIGN     =  '%='
    REMAINDER            =  '%'
    AT                   =  '@'
    SHIFT_RIGHT_ASSIGN   =  '>>='
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    VAR_ASSIGN           =  ':='
    TRIPLE_DOT           =  '...'
    DOT                  =  '.'
    RANGE                =  '..'
    TILDA                =  '~'
    SINGLE_QUOTE         =  "'"
    DOUBLE_QUOTE         =  '"'
    BACKTICK             =  '`'
    SEMICOLON_SYNTHETIC  = '<NL>'
    TYPE_                = 'type'
    raw_string           = 'raw_string'
    char                 = 'char'
  ]

  extends("(Or|And|Add|Conversion|Mul|Selector|Conditional|OrBlock)Expr")=BinaryExpr
  extends(".*(Expr|Literal|Lit|OperandName)|TypeInitExpr|MapInitExpr|UnsafeExpression|CompileTimeIfExpression|IfExpression|ArrayCreation|InExpression|NotInExpression|MatchExpression|EnumFetch|MutExpression|SharedExpression|DotExpression|IsExpression|NotIsExpression|AsExpression|UnpackingExpression|ErrorPropagationExpression|ForceNoErrorPropagationExpression|ConstexprIdentifierExpression|SqlExpression|GoExpression|LockExpression|IncDecExpression")=Expression

  implements("(Type|Import)Spec|(Var|Const|Param|Field|Label)Definition|(Struct|TypeAlias|Union|Enum)Declaration|Receiver")="org.vlang.lang.psi.VlangNamedElement"
//  implements("FunctionLit")="org.vlang.lang.psi.GoSignatureOwner"
//  implements("MethodSpec")="org.vlang.lang.psi.GoNamedSignatureOwner"
  implements("(Function|Method)Declaration")="org.vlang.lang.psi.VlangFunctionOrMethodDeclaration"
//  implements("(Const|Type|Var)Declaration")="org.vlang.lang.psi.GoTopLevelDeclaration"
  implements(".*ReferenceExpression|FieldName")="org.vlang.lang.psi.VlangReferenceExpressionBase"
  implements("TypeDecl")="org.vlang.lang.psi.VlangReferenceExpressionBase"

  extends("ImportSpec|ParamDefinition|Receiver|(Var|Const|Field|Label)Definition")="org.vlang.lang.psi.impl.VlangSimpleNamedElementImpl"

  extends("(Function|Method)Declaration")="org.vlang.lang.psi.impl.VlangFunctionOrMethodDeclarationImpl<?>"
  extends("ModuleClause")="org.vlang.lang.psi.impl.VlangStubbedElementImpl<?>"
  extends("(Struct|TypeAlias|Union|Enum)Declaration")="org.vlang.lang.psi.impl.VlangNamedElementImpl<?>"

  elementTypeFactory("ModuleClause|(Function|Method|Struct|TypeAlias|Union|Enum)Declaration")='org.vlang.lang.stubs.VlangElementTypeFactory.stubFactory'

  extends(".*Statement")=Statement
  extends(".*Type|TypeList")=TypeDecl

  pin('.*List(?:_\d.*)?')=1

  generateTokenAccessors=true
}

// [module <ident>]
// [imports]
//
// [TopLevelDeclarations]
File ::= ModuleClause? ImportList? TopLevelDeclaration*

// General rule for explicit and implicit ';'
private semi ::= '<NL>' | ';' | <<eof>>

// [attr] module <name>
ModuleClause ::= Attributes? module identifier semi {pin=2
  methods=[getName]
  stubClass="org.vlang.lang.stubs.VlangModuleClauseStub"
}

// import <part1>
// import <part1>.<part2>
// import <part1>.<part2> { <import list> }
// import <part1>.<part2> as <alias>
ImportList ::= (ImportDeclaration semi)+ {
  methods=[addImport]
}

// import <spec>
ImportDeclaration ::= import ImportSpec {
  pin(".*")=1
  methods=[addImportSpec]
}

// <part1>
// <part1>.<part2>
// <part1> { <ref> }
// <part1> as <alias>
ImportSpec ::= ImportString ('.' ImportString)* (SelectiveImportList | ImportAlias)? {
//  stubClass="org.vlang.lang.stubs.GoImportSpecStub"
  methods=[getIdentifier getAlias getLastPart getLocalPackageName shouldGoDeeper isForSideEffects isDot getPath getName isCImport]
}
// just identifier
private ImportString ::= identifier {methods=[getReferences resolve getPath getPathTextRange]}

// { <ref>[, <ref2>] }
SelectiveImportList ::= '{' ReferenceExpression (',' ReferenceExpression)* '}' {pin(".*")=2}

// as <ident>
ImportAlias ::= as identifier {pin(".*")=2}
// end of import rule

////////// TOP LEVEL DECLARATIONS //////////

private TopLevelDeclaration ::= !<<eof>> TopDeclaration semi {pin=1 recoverWhile=TopLevelDeclarationRecover}
private TopDeclaration ::=
  ConstDeclaration
  | FunctionDeclaration
  | MethodDeclaration
  | StructDeclaration
  | EnumDeclaration
  | InterfaceDeclaration
  | UnionDeclaration
  | GlobalVariableDeclaration
  | CompileTimeIfStatement
  | CompileTimeForStatement
  | CIncludeStatement
  | CFlagStatement
  | LanguageInjectionStatement
  | TypeAliasDeclaration

private TopLevelDeclarationRecover ::= !(';' | 'type' | const | fn | pub | BUILTIN_GLOBAL | var | struct | enum | interface | union | import | C_INCLUDE | C_FLAG | FOR_COMPILE_TIME | IF_COMPILE_TIME | LANGUAGE_INJECTION | '[')

////////// TOP LEVEL DECLARATIONS END //////////


////////// STATEMENTS //////////

// Block { }
BlockWithConsume ::= /*<<consumeBlock>> |*/ BlockInner {elementType=Block}
Block ::= BlockInner {methods=[processDeclarations]}
private BlockInner ::= '{' ('}' | (<<withOff Statements "BLOCK?" "PAR">> | (!() Statements)) '}') {pin(".*")=1}
// end of block rule

private Statements ::= StatementWithSemi*

private StatementWithSemi ::= Statement (semi | &'}') { pin=1 recoverWhile=StatementRecover }
Statement ::=
  ConstDeclaration
  | SimpleStatement
  | LockStatement
  | GoStatement
  | ReturnStatement
  | BreakStatement
  | ContinueStatement
  | GotoStatement
  | Block
  | CompileTimeIfStatement
  | IfStatement
  | UnsafeStatement
  | ForStatement
  | CompileTimeForStatement
  | AssertStatement
  | CFlagStatement
  | CIncludeStatement
  | LanguageInjectionStatement
  | TypeAliasDeclaration
  | AsmBlockStatement
  | SqlStatement
  | LabeledStatement
//| SelectStatement
  | DeferStatement {methods=[processDeclarations]}

private StatementRecover ::= !('!' | '?' | '&' | '(' | '*' | '+' | '-' | ';' | '<-' | '^' | 'type' | '{' | '|' | '|=' | '||' | '&&' | '}' | break | case | const | continue | decimali | default | defer | else | fallthrough | float | floati | for | fn | pub | mut | shared | go | goto | hex | identifier | if | int | interface | oct | return | select | string | raw_string | char | struct | union | switch | var | unsafe | assert | match | lock | rlock | asm | sql | true | false | FOR_COMPILE_TIME | IF_COMPILE_TIME | ELSE_COMPILE_TIME | BUILTIN_GLOBAL | C_INCLUDE | C_FLAG | LANGUAGE_INJECTION)

// attributes start
// [attr1]
// [attr2]
Attributes ::= Attribute (semi Attribute)* semi? {pin=1}
// [<expr>[, <expr2>]]
Attribute ::= '[' AttributeExpression (';' AttributeExpression)* ']' {pin=1}
// if <ident> or <plain>
AttributeExpression ::= IfAttribute | PlainAttribute
// if <ident>
IfAttribute ::= if '!'? identifier '?'? {pin=1}
// <ident> or 10 or "string" [: <ident> or "string"]
PlainAttribute ::= (identifier | unsafe | sql | int | string | StringLiteral) (':' (identifier | StringLiteral))?
// end of attributes

// simple statements
SimpleStatement ::=
  VarDeclaration
  | (LeftHandExprList AssignmentStatement? | SendStatement) {pin(".*")=LeftHandExprList}

// <vars> := <exprs>
VarDeclaration ::= VarDefinitionList ':=' (ExpressionList) {pin=2}

// <label>: <stmt>
LabeledStatement ::= Label Statement? {pin=2}

// = <list>
left AssignmentStatement ::= AssignOp (ExpressionList) {pin=1}
AssignOp ::= '=' | '+=' | '-=' | '|=' | '^=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '&^='

// <- <expr>
left SendStatement ::= '<-' Expression {pin=1 methods=[getSendExpression]}
// end of simple statements

// If-else
// if <condition> { ... } as statement
IfStatement ::= IfExpression
// else { ... }
// else if { ... }
ElseStatement ::= else (IfStatement | Block) {pin=1}

// Compile time if-else
// $if <condition> { ... } as statement
CompileTimeIfStatement ::= CompileTimeIfExpression
// $else { ... }
// $else $if { ... }
CompileElseStatement ::= ELSE_COMPILE_TIME (CompileTimeIfStatement | Block) {pin=1}

// For statement
// [<label>:] for ( ... ) { ... }
ForStatement ::= Label? for <<enterMode "BLOCK?">> (ForOrRangeClause Block | Block | Expression Block) <<exitModeSafe "BLOCK?">> {pin(".*")="for|ForOrRangeClause"}
// <label>:
Label ::= LabelRef ':' {pin=2}
// for (;;;) or for (<*> in <*>)
private ForOrRangeClause ::= (ForClause | RangeClause)
// [<statement>]; [<expression>]; [<statement>]
ForClause ::= SimpleStatement? ';' Expression? ';' SimpleStatement? {methods=[processDeclarations]}
// in <expression> or <var> in <expression>
RangeClause ::= in Expression | VarDefinitionList in Expression {
  pin(".*")=2
  extends=VarDeclaration
  methods=[getRangeExpression getLeftExpressionsList getRightExpressionsList]
}

// $for (...)  { ... }
CompileTimeForStatement ::= FOR_COMPILE_TIME (ForOrRangeClause Block | Block | Expression Block) {pin=1}

// (r)lock <var> { ... }
LockStatement ::= LockExpression

// go <expt>
GoStatement ::= GoExpression

// return <expr>
// return <expr>, <expr>
ReturnStatement ::= return ExpressionList?

// break [<label>]
BreakStatement ::= break LabelRef?

// continue [<label>]
ContinueStatement ::= continue LabelRef?

// goto <label>
GotoStatement ::= goto LabelRef

// assert <expr>
AssertStatement ::= assert Expression

// unsafe { ... } as statement
UnsafeStatement ::= UnsafeExpression

// defer { ... } rule
DeferStatement ::= defer Block

// <label>:
LabelRef ::= identifier { methods=[getReference] }

// TODO
//SelectStatement ::= select '{' CommClause* '}'
//CommClause ::= CommCase ':' Statements? {pin=1}
//CommCase ::= case ( Expression SendStatement | RecvStatement ) | default {pin(".*")="case"}
//RecvStatement ::= ExpressionsOrVariables? Expression {pin=0 extends=VarSpec methods=[getRecvExpression getLeftExpressionsList getRightExpressionsList]}

// #...
// Used for inject other language in code
LanguageInjectionStatement ::= LANGUAGE_INJECTION (semi LANGUAGE_INJECTION)* {pin=1}

// C statements
// #include <string>
CIncludeStatement ::= C_INCLUDE StringLiteral {pin=1}
// #flag ...
CFlagStatement ::= C_FLAG C_FLAG_VALUE {pin=1}
// end of C statements

// asm [volatile] { ... }
AsmBlockStatement ::= asm volatile? identifier AsmBlock {pin=1}
AsmBlock ::= '{' ('}' | (ASM_LINE)* '}') {pin(".*")=1}

SqlStatement ::= SqlExpression

////// DECLARATIONS //////

// struct
StructDeclaration ::= Attributes? SymbolVisibility? StructType {
  stubClass="org.vlang.lang.stubs.VlangStructDeclarationStub"
  methods=[getIdentifier getName]
}

StructType ::= struct identifier GenericDeclaration? '{' Fields? '}' {pin=1}

MemberModifiers ::= MemberModifier (MemberModifier)* ':' {pin=1}
MemberModifier ::= mut | pub | shared | BUILTIN_GLOBAL

DefaultFieldValue ::= '=' Expression
private Fields ::= MemberModifiers? FieldDeclaration? (semi Fields)* semi? {pin=1}
FieldDeclaration ::= (FieldDefinitionList shared? TypeDecl | AnonymousFieldDefinition) DefaultFieldValue? Attribute? Tag?
Tag ::= StringLiteral
private FieldDefinitionList ::= FieldName (',' FieldName)*
FieldName ::= identifier {
//  stubClass="org.vlang.lang.stubs.GoFieldDefinitionStub"
}

AnonymousFieldDefinition ::= TypeDecl {
//  stubClass="org.vlang.lang.stubs.GoAnonymousFieldDefinitionStub"
  methods=[getIdentifier getName getTypeReferenceExpression getGoTypeInner]
}


// interface
InterfaceDeclaration ::= Attributes? SymbolVisibility? InterfaceType

InterfaceType ::= interface identifier GenericDeclaration? '{' InterfaceMembers? '}' {pin=1}

private InterfaceMembers ::= MemberModifiers? (InterfaceFieldDeclaration | InterfaceMethodDeclaration | AnonymousInterfaceDefinition)? (semi InterfaceMembers)* semi? {pin=1}
InterfaceFieldDeclaration ::= (FieldDefinitionList TypeDecl) Attribute? Tag?
InterfaceMethodDeclaration ::= identifier Signature Attribute? Tag?

AnonymousInterfaceDefinition ::= TypeDecl {
//  stubClass="org.vlang.lang.stubs.GoAnonymousFieldDefinitionStub"
  methods=[getIdentifier getName getTypeReferenceExpression getGoTypeInner]
}


// enum
EnumDeclaration ::= Attributes? SymbolVisibility? enum identifier GenericDeclaration? '{' EnumFields? '}' {
  pin=3
  stubClass="org.vlang.lang.stubs.VlangEnumDeclarationStub"
  methods=[getName]
}
EnumFields ::= EnumFieldDeclaration (semi EnumFieldDeclaration)* semi?
EnumFieldDeclaration ::= identifier ('=' Expression)? {pin=1}


// union
UnionDeclaration ::= Attributes? SymbolVisibility? union identifier GenericDeclaration? '{' Fields? '}' {
  pin=3
  stubClass="org.vlang.lang.stubs.VlangUnionDeclarationStub"
  methods=[getName]
}


// [<visibility>] type <ident> = <types>
TypeAliasDeclaration ::= SymbolVisibility? 'type' identifier GenericDeclaration? '=' TypeUnionList {
  pin=2
  stubClass="org.vlang.lang.stubs.VlangTypeAliasDeclarationStub"
  methods=[getName]
}
// <type> [ | <type2>]...
TypeUnionList ::= TypeDecl (semi? '|' TypeDecl)* {pin=1}


// const declarations
// [<visibility>] const <name> = <value>
// [<visibility>] const (<list>)
ConstDeclaration ::= SymbolVisibility? const ( ConstSpec | '(' ConstSpecs? ')' ) {pin(".*")=2 methods=[addSpec deleteSpec]}
// <spec> [<spec2>]
private ConstSpecs ::= ConstSpec (semi ConstSpec)* semi? {pin=1}
// <list> = <list>
ConstSpec ::= ConstDefinition '=' Expression {
  pin=2
//  stubClass="org.vlang.lang.stubs.GoConstSpecStub"
  methods=[deleteDefinition]
}

// TODO: when const declaration will support multiple assign
//ConstSpec ::= ConstDefinitionList [ ('=' ExpressionList | TypeDecl '=' ExpressionList) ] {
//  pin(".*")=1
////  stubClass="org.vlang.lang.stubs.GoConstSpecStub"
//  methods=[deleteDefinition]
//}
//private ConstDefinitionList ::= ConstDefinition ( ',' ConstDefinition )*

// just identifier
ConstDefinition ::= identifier {
//  stubClass="org.vlang.lang.stubs.GoConstDefinitionStub"
  methods=[getGoTypeInner getValue]
}
// end of const


// <[attrs]> __global <ident> = <expr>
// <[attrs]> __global <ident> <type>
GlobalVariableDeclaration ::= Attributes? BUILTIN_GLOBAL identifier ('=' Expression | TypeDecl) {pin=3}


VarModifiers ::= (mut | shared)*

SymbolVisibility ::= pub | BUILTIN_GLOBAL

GenericDeclaration ::= '<' GenericDeclarationList '>'

GenericDeclarationList ::= GenericName (',' GenericName)*

GenericName ::= identifier {
//  stubClass="org.vlang.lang.stubs.GoGenericNameStub"
//  methods=[getName]
}

FunctionDeclaration ::= Attributes? SymbolVisibility? fn identifier GenericDeclaration? Signature BlockWithConsume? {
  pin=4
  stubClass="org.vlang.lang.stubs.VlangFunctionDeclarationStub"
  methods=[getName]
}

MethodDeclaration ::= Attributes? SymbolVisibility? fn Receiver MethodName GenericDeclaration? Signature BlockWithConsume? {
  pin=5
  stubClass="org.vlang.lang.stubs.VlangMethodDeclarationStub"
  methods=[getReceiverType getIdentifier]
}
// <ident> or <ops> for overload
MethodName ::= identifier | AddOp | MulOp | RelOp

// ([mut|shared] <ident> <type>)
Receiver ::= '(' (VarModifiers? identifier ReceiverTail | ReceiverTail) ')' {
  methods=[getGoTypeInner]
  pin=1
//  stubClass="org.vlang.lang.stubs.GoReceiverStub"
}
private ReceiverTail ::= TypeDecl ','?

////// DECLARATIONS END //////


////////// STATEMENTS END //////////


////////// EXPRESSIONS //////////

Expression ::=
    OrBlockExpr
  | OrExpr
  | AndExpr
  | ConditionalExpr
  | AddExpr
  | MulExpr
  | UnaryExpr
  | SendExpr
  | RangeExpr
  | TypeInitExpr
  | UnsafeExpression
  | MatchExpression
  | IfExpression
  | CompileTimeIfExpression
  | ArrayCreation
  | InExpression
  | NotInExpression
  | IsExpression
  | NotIsExpression
  | AsExpression
  | MaxGroup
  | EnumFetch
  | MutExpression
  | SharedExpression
  | DotExpression
  | ErrorPropagationExpression
  | ForceNoErrorPropagationExpression
  | ConstexprIdentifierExpression
  | SqlExpression
  | MapInitExpr
  | GoExpression
  | LockExpression
  | IncDecExpression
  | ParenthesesExpr {methods=[getGoType] /*implements="org.vlang.lang.psi.GoTypeOwner"*/}
// end of expression rule

// (r)lock <var> { ... }
LockExpression ::= (lock | rlock) <<enterMode "BLOCK?">> ExpressionList Block <<exitModeSafe "BLOCK?">>  {pin=1}

// go <expr>
GoExpression ::= go Expression

// { ... }
MapInitExpr ::= <<isModeOff "BLOCK?">> '{' KeyValues '}' {pin=4}
KeyValues ::= KeyValue ((semi | ',') KeyValue)* (semi | ',')? {pin=1}
// <key> : <value>
KeyValue ::= (Literal | ReferenceExpression) ':' Expression {pin=1}

// <type> {...}
TypeInitExpr ::= <<isModeOff "BLOCK?">> TypeDecl '{' ( '}' | FieldInitialization '}') {pin=4}
FieldInitialization ::= FieldInitializationKeyValueList | FieldInitializationValueList
FieldInitializationKeyValueList ::= ((FieldInitializationKeyValue | UnpackingExpression) (semi | ','?))+ semi?
private FieldInitializationKeyValue ::= FieldInitializationKey ':' Expression {pin=2}
FieldInitializationKey ::= Expression
FieldInitializationValueList ::= (FieldInitializationValue ','?)* semi?
// see return if a > b { a } else { b }
private FieldInitializationValue ::= Expression {pin=1}
// end of type init

private MaxGroup ::=
  ReferenceExpression
  | CallExpr
  | IndexOrSliceExpr
  | Literal
  | FunctionLit
//| CompositeLit

// fn (...) {...}
FunctionLit ::= fn <<enterMode "BLOCK?">> CaptureList? Signature Block <<exitModeSafe "BLOCK?">> {pin=1 methods=[processDeclarations]}
// [<var1>, <var2>, ...]
CaptureList ::= '[' (Capture | ',' Capture)* ']' {pin=3}
// [mut] <ident>
Capture ::= VarDefinition {pin=1}

////// TYPES //////

TypeDecl ::= (TypeLit | TypeName) GenericDeclaration? {
  methods=[getIdentifier]
}
//  | ParType {
//  stubClass="org.vlang.lang.stubs.GoTypeStub"
//  methods=[getUnderlyingType shouldGoDeeper]
//  }
//ParType ::= '(' Type ')' {methods=[getActualType]}

private TypeName ::= TypeReferenceExpression ('.' TypeReferenceExpression)*
TypeReferenceExpression ::= identifier { methods=[getReference getQualifier resolve resolveType] }

private TypeLit ::=
    ArrayOrSliceType
  | PointerType
  | NullableType
  | NotNullableType
  | FunctionType
  | MapType
  | ChannelType
  | StructType
  | InterfaceType

// [<expr>]<type>
ArrayOrSliceType ::= '[' Expression? ']' TypeDecl {pin=1}

// &<type>
// &&<type>
// &&&<type>
PointerType ::= ('&' | '&&')+ TypeDecl {pin=1}
// !<type>
// bare !
NotNullableType ::= '!' TypeDecl? {pin=1}
// ?<type>
// bare ?
NullableType ::= '?' TypeDecl? {pin=1}
// fn (...) <type>
// fn (...) (<type1>, <type2>, ...)
FunctionType ::= fn Signature {pin=1}

// signature
// (...) ...
Signature ::= Parameters Result? {pin=1 /*stubClass="org.vlang.lang.stubs.GoSignatureStub"*/}
Result ::= '?'? '(' TypeListNoPin ')' | TypeDecl | Parameters { // todo: reorder and pin (
  methods=[isVoid]
//  stubClass="org.vlang.lang.stubs.GoResultStub"
}
Parameters ::= '(' [ (ParameterList ','?| TypeListNoPin) ] ')' {
  pin=1
//  stubClass="org.vlang.lang.stubs.GoParametersStub"
}
private ParameterList ::= ParameterDeclaration (',' (ParameterDeclaration | &')'))* {pin(".*")=1}
ParameterDeclaration ::= ParamDefinitionListNoPin? '...'? TypeDecl | TypeDecl { // todo: use left rule
//  stubClass="org.vlang.lang.stubs.GoParameterDeclarationStub"
  methods = [isVariadic]
}
private ParamDefinitionListNoPin ::= ParamDefinition &(!('.' | ')')) (',' ParamDefinition)* // todo
ParamDefinition ::= VarModifiers? identifier {
//  stubClass="org.vlang.lang.stubs.GoParamDefinitionStub"
  methods = [isVariadic]
}
TypeListNoPin ::= TypeDecl ( ',' TypeDecl )* ','?
// end of signature

// map[<type>]<type>
MapType ::= 'map' '[' TypeDecl ']' TypeDecl {
  pin=2
  methods = [
    keyType="Type[0]"
    valueType="Type[1]"
  ]
}

// chan <type>
ChannelType ::= chan TypeDecl? {pin=1}

////// TYPES END //////


LeftHandExprList ::= ExpressionList
private ExpressionArgList ::= NamedExpressionArgList | SimpleExpressionArgList

private SimpleExpressionArgList ::= ExpressionOrTypeWithRecover (',' (ExpressionOrTypeWithRecover | &')'))* {pin(".*")=2}
private ExpressionOrTypeWithRecover ::= Expression {recoverWhile=ExpressionListRecover}

private NamedExpressionArgList ::= NamedArgumentExpr ((semi | ',') (NamedArgumentExpr | &')'))* {pin(".*")=1}
private NamedArgumentExpr ::= identifier ':' (Expression | UnpackingExpression) {pin=2}

private ExpressionList ::= ExpressionWithRecover (',' (ExpressionWithRecover | &')'))* {pin(".*")=1}
private ExpressionWithRecover ::= Expression !':' {recoverWhile=ExpressionListRecover}
private ExpressionListRecover ::= !('!' | '?' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '&^' | '&^=' | '(' | ')' | '*' | '*=' | '+'  | '++' | '+=' | ',' | '-' | '--' | '-=' | '...' | '/' | '/=' | ':' | ';' | '<' | '<-' | '<<' | '<<=' | '<=' | '<NL>' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '[' | ']' | '^' | '^=' | 'type' | '{' | '|' | '|=' | '||' | '}' | break | case | chan | const | continue | decimali | default | defer | else | fallthrough | float | floati | for | fn | go | goto | hex | identifier | if | int | interface | oct | return | select | string | raw_string | char | struct | enum | union | switch | var | unsafe | assert | match | asm | sql | true | false )

private VarDefinitionList ::= VarDefinition (',' VarDefinition)*
VarDefinition ::= VarModifiers? identifier {
  pin=2
  methods=[getGoTypeInner getReference getValue]
//  stubClass="org.vlang.lang.stubs.GoVarDefinitionStub"
}

// <expr>.<ident>[(...)]
DotExpression ::= Expression '.' MethodOrField {pin=1}

private MethodOrField ::= MethodCall | FieldLookup
// just <ident>
FieldLookup ::= ReferenceExpression
// <ident>(...)
MethodCall ::= ReferenceExpression ArgumentList {pin=2}

// just <ident> with ref
ReferenceExpression ::= identifier { methods=[getReference getQualifier resolve getReadWriteAccess] extends=Expression}

// math and logical expressions
OrExpr ::= Expression semi? '||' Expression
AndExpr ::= Expression semi? '&&' Expression
SendExpr ::= Expression '<-' Expression
UnaryExpr ::=  UnaryOp Expression {methods=[getOperator]}
ConditionalExpr ::= Expression RelOp Expression
AddExpr ::= Expression AddOp Expression
MulExpr ::= Expression MulOp Expression

private RelOp ::= '==' | '!=' | '<' | '<=' | '>' | '>='
private AddOp ::= '+' | '-' | '|' | '^'
private MulOp ::= '*' | '/' | '%' | '<<' | '>>' | '&' | '&^'
private UnaryOp ::= '+' | '-' | '!' | '^' | '~' | '*' | '&' | '&&' | '<-'

fake BinaryExpr ::= Expression+ {
  methods=[left="Expression[0]" right="Expression[1]" getOperator]
}
// end of math and logical expressions

ParenthesesExpr ::= '(' /*<<enterMode "PAR">>*/ Expression /*<<exitModeSafe "PAR">>*/')' {pin=1}

// <expr>++/--
IncDecExpression ::= Expression ('++' | '--') {pin=1}

// @<ident>
ConstexprIdentifierExpression ::= '@' identifier {pin=2}

// <expr>?
ErrorPropagationExpression ::= Expression '?' {pin=1}

// <expr>!
ForceNoErrorPropagationExpression ::= Expression '!' {pin=1}

// ...<expr>
UnpackingExpression ::= '...' Expression {pin=1}

// .<ident>
EnumFetch ::= '.' identifier {pin=2}

// <expr>..<expr>
// <expr>...<expr> (inclusive)
RangeExpr ::= Expression ('..' | '...') !']' Expression {pin=2}

// <expr> or { ... }
OrBlockExpr ::= Expression or Block

// mut <expr>
MutExpression ::= mut Expression

// shared <expr>
SharedExpression ::= shared Expression

// [<list>]
ArrayCreation ::= '[' ArrayCreationList? (']' '!'?) {pin=1}
// <expr1>, <expr2>, ..., <exprN>
ArrayCreationList ::= ExpressionWithRecover (',' (ExpressionWithRecover | &']'))* {pin(".*")=1}

// <expr>[<expr>]
// <expr>#[<exr>]
// <expr>[0..10]
// <expr>[..10]
// <expr>[0..]
IndexOrSliceExpr ::= Expression ('[' | HASH_LBRACK) (SliceExprBody | IndexExprBody) '..'? ']' {pin=2 methods = [getExpression getIndices]}
private IndexExprBody ::= Expression SliceExprBodyInner?
private inner SliceExprBodyInner ::= SliceExprBody
private SliceExprBody ::= &'..' '..' Expression

// <expr>(...)
CallExpr ::= Expression ArgumentList
// ([<arg1>, <arg2>[...], ...])
ArgumentList ::= '(' [ ExpressionArgList '...'? ','? ] ')' {pin=1}

// match <expr> { ... }
MatchExpression ::= match Expression '{' MatchArms '}' {pin=1}
// <expr>[, <expr2>] { ... }
// else { ... }
MatchArms ::= (MatchArm | MatchElseArmClause)*
// <expr>[, <expr2>] { ... }
MatchArm ::= <<enterMode "BLOCK?">> MatchExpressionList Block <<exitModeSafe "BLOCK?">> semi {pin=3}
// <expr>[, <expr2>]
private MatchExpressionList ::= Expression (',' Expression)* {pin(".*")=1}
// else { ... }
MatchElseArmClause ::= else Block semi {pin=1}

// <expr> in <expr>
InExpression ::= Expression in Expression {pin=2}
// <expr> !in <expr>
NotInExpression ::= Expression NOT_IN Expression {pin=2}

// <expr> is <expr>
IsExpression ::= Expression is Expression {pin=2}
// <expr> !is <expr>
NotIsExpression ::= Expression NOT_IS Expression {pin=2}

// <expr> as <expr>
AsExpression ::= Expression as TypeDecl {pin=2}

// unsafe { ... }
UnsafeExpression ::= unsafe Block {pin=1}

// if <condition> { ... }
IfExpression ::= if Condition Block (semi? ElseStatement)? {pin=1}

//  $if <condition> { ... }
CompileTimeIfExpression ::= IF_COMPILE_TIME Condition Block CompileElseStatement? {pin=1}
private Condition ::= <<enterMode "BLOCK?">> SimpleStatementOpt? Expression? <<exitModeSafe "BLOCK?">>
private SimpleStatementOpt ::= SimpleStatement ';'?

// sql <ident> { ... }
SqlExpression ::= sql identifier SqlBlock {pin=1}
SqlBlock ::= '{' ('}' | (SQL_LINE)* '}') {pin(".*")=1}

////////// EXPRESSIONS END //////////


////// LITERALS //////

// literals line 0 or 10.5 and other
Literal ::=
    int
  | float
  | floati
  | decimali
  | hex
  | oct
  | bin
  | true
  | false
  | StringLiteral
  | char

// just different strings
StringLiteral ::= string | raw_string {
//  implements = "com.intellij.psi.PsiLanguageInjectionHost"
  methods = [isValidHost updateText createLiteralTextEscaper getDecodedText]
}

////// LITERALS END //////
